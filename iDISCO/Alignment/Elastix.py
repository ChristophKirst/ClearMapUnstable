# -*- coding: utf-8 -*-

"""
Interface to Elastix for brain alignment

Created on Thu Jun  4 14:37:06 2015

@author: ckirst
"""

import sys
self = sys.modules[__name__];

import os
import tempfile
import shutil
import numpy

import re

import iDISCO.IO.IO as io

##############################################################################
# Initialization and Enviroment Settings
##############################################################################


class ElastixParameter(object):
    ElastixBinary = None;
    ElastixLib = None;
    TransformixBinary = None;
    
    Initialized = False;
    
    def printInfo(slf):
        print "ElastixBinary     = %s" % slf.ElastixBinary;
        print "ElastixLib        = %s" % slf.ElastixLib;
        print "TransformixBinary = %s" % slf.TransformixBinary;
    
ElastixSettings = ElastixParameter();


def setElastixLibraryPath(libpath): 
    """Add elastix libs to path in linux"""
    
    if os.environ.has_key('LD_LIBRARY_PATH'):
        lp = os.environ['LD_LIBRARY_PATH']   
        os.environ['LD_LIBRARY_PATH'] = lp + ':' + libpath;
    else:
        os.environ['LD_LIBRARY_PATH'] = libpath


def initializeElastix(elastixdir):
    """Initialize all paths and binaries of elastix using installation directory elastixdir"""
    
    global ElastixSettings;
    
    #search for elastix binary
    elastixbin = os.path.join(elastixdir, 'bin/elastix');
    if os.path.exists(elastixbin):
        ElastixSettings.ElastixBinary = elastixbin;
    else:
        RuntimeError("Cannot find elastix binary %s" % elastixbin);
    
    #search for transformix binarx
    transformixbin = os.path.join(elastixdir, 'bin/transformix');
    if os.path.exists(transformixbin):
        ElastixSettings.TransformixBinary = transformixbin;
    else:
        RuntimeError("Cannot find transformix binary %s" % transformixbin);
    
    #search for elastix libs
    elastixlib = os.path.join(elastixdir, 'lib');
    if os.path.exists(elastixlib):
        ElastixSettings.ElastixLib = elastixlib;
    else:
        RuntimeError("Cannot find elastix libs in %s" % elastixlib);
    
    #set path
    self.setElastixLibraryPath(elastixlib);
        
    ElastixSettings.Initialized = True;
    
    print "Elastix sucessfully initialized from path: %s" % elastixdir


def checkElastixInitialized():
    """Checks if elastix is initialized"""
    
    global ElastixSettings;
    
    if not ElastixSettings.Initialized:
        RuntimeError("Elastix not initialized: run initializeIlastix first");
    
    print ElastixSettings.ElastixBinary;




def getTransformParameterFile(resultdir):
    """Finds and returns the transformation parameter file generated by elastix"""    
    
    files = os.listdir(resultdir);
    files = [x for x in files if re.match('TransformParameters.\d.txt', x)];
    files.sort();
    
    if files == []:
        raise RuntimeError('Cannot find a valid transformation file in ' + resultdir);
    
    return os.path.join(resultdir, files[-1])

def setPathTransformParameterFiles(resultdir):
    """Replaces relative with abolsute path in the parameter files in the result directory"""
    
    files = os.listdir(resultdir);
    files = [x for x in files if re.match('TransformParameters.\d.txt', x)];
    files.sort();
    
    if files == []:
        raise RuntimeError('Cannot find a valid transformation file in ' + resultdir);
    
    rec = re.compile("\(InitialTransformParametersFileName \"(?P<parname>.*)\"\)");
    
    for f in files:
        fh, tmpfn = tempfile.mkstemp();
        ff = os.path.join(resultdir, f);
        #print ff        
        
        with open(tmpfn, 'w') as newfile:
            with open(ff) as parfile:
                for line in parfile:
                    print line
                    m = rec.match(line);
                    if m != None:
                        pn = m.group('parname');
                        if pn != 'NoInitialTransform':
                            pathn, filen = os.path.split(pn);
                            filen = os.path.join(resultdir, filen);
                            newfile.write(line.replace(pn, filen));
                        else:
                            newfile.write(line);
                    else:
                        newfile.write(line);
                            
        os.close(fh);
        os.remove(ff);
        shutil.move(tmpfn, ff);


def parseElastixOutputPoints(filename, indices = True):
    """Parses the output points from the output file of transformix"""
    
    with open(filename) as f:
        lines = f.readlines()
        f.close();
    
    np = len(lines);
    
    if np == 0:
        return numpy.zeros((0,3));
    
    points = numpy.zeros((np, 3));
    k = 0;
    for line in lines:
        ls = line.split();
        if indices:
            for i in range(0,3):
                points[k,i] = float(ls[i+22]);
        else:
            for i in range(0,3):
                points[k,i] = float(ls[i+30]);
        
        k += 1;
    
    return points;
          
         
def getTransformFileSizeAndSpacing(transformfile):
    """Parse the image size and spacing from a transformation parameter file"""
    
    resi = re.compile("\(Size (?P<size>.*)\)");
    resp = re.compile("\(Spacing (?P<spacing>.*)\)");
    
    si = None;
    sp = None;
    with open(transformfile) as parfile:
        for line in parfile:
            #print line;
            m = resi.match(line)
            if m != None:
                pn = m.group('size');
                si = pn.split();
                print si
                
            m = resp.match(line);
            if m != None:
                pn = m.group('spacing');
                sp = pn.split();
                print sp 
    
        parfile.close();
    
    si = [float(x) for x in si];
    sp = [float(x) for x in sp];
    
    return si, sp

    
def setTransformFileSizeAndSpacing(transformfile, size, spacing):
    """Replaces size and scale in the transformation parameter file"""
    
    resi = re.compile("\(Size (?P<size>.*)\)");
    resp = re.compile("\(Spacing (?P<spacing>.*)\)");
    
    fh, tmpfn = tempfile.mkstemp();
    
    si = [int(x) for x in size];
    
    with open(transformfile) as parfile:        
        with open(tmpfn, 'w') as newfile:
            for line in parfile:
                print line
                
                m = resi.match(line)
                if m != None:
                    newfile.write("(Size %d %d %d)" % si);
                else:
                    m = resp.match(line)
                    if m != None:
                        newfile.write("(Spacing %d %d %d)" % spacing);
                    else:
                        newfile.write(line);
            
            newfile.close();               
            parfile.close();
            
            os.remove(transformfile);
            shutil.move(tmpfn, transformfile);
        


def rescaleSizeAndSpacing(transformfile,  size, spacing, scale):
    si = [int(x * scale) for x in size];
    sp = spacing / scale;
    
    return si, sp



##############################################################################
# Elastix Runs
##############################################################################

def alignData(movingimage, fixedimage, affineparfile, bsplinefile, outdirectory = None):
    """Align data to reference using elastix"""
    
    self.checkElastixInitialized();
    global ElastixSettings;
    
    if outdirectory == None:
        outdirectory = tempfile.gettempdir();
    
    if not os.path.exists(outdirectory):
        os.mkdir(outdirectory);
    
    
    if bsplinefile is None:
        cmd = ElastixSettings.ElastixBinary + ' -threads 16 -m ' + movingimage + ' -f ' + fixedimage + ' -p ' + affineparfile + ' -out ' + outdirectory;
    else:
        cmd = ElastixSettings.ElastixBinary + ' -threads 16 -m ' + movingimage + ' -f ' + fixedimage + ' -p ' + affineparfile + ' -p ' + bsplinefile + ' -out ' + outdirectory;
        #$ELASTIX -threads 16 -m $MOVINGIMAGE -f $FIXEDIMAGE -fMask $FIXEDIMAGE_MASK -p  $AFFINEPARFILE -p $BSPLINEPARFILE -out $ELASTIX_OUTPUT_DIR
    
    res = os.system(cmd);
    
    if res != 0:
        raise RuntimeError('failed executing: ' + cmd);
    
    return outdirectory


def transformData(data, alignmentdirectory = None, transformparameterfile = None, outdirectory = None):
    """Transform a raw data set to reference using the elastix alignment results"""
    
    if not isinstance(data, basestring):
        imgname = os.path.join(tempfile.gettempdir(), 'elastix_input.tif');
        io.writeDataStack(data, imgname);
    else:
        imgname = data;

    if outdirectory == None:
        outdirname = os.path.join(tempfile.tempdir, 'elastix_output');
    else:
        outdirname = outdirectory;
        
    if not os.path.exists(outdirname):
        os.makedirs(outdirname);
        
    
    if transformparameterfile == None:
        if alignmentdirectory == None:
            RuntimeError('neither alignment directory and transformation parameter file specified!'); 
        transformparameterdir = alignmentdirectory
        transformparameterfile = getTransformParameterFile(transformparameterdir);
    else:
        transformparameterdir = os.path.split(transformparameterfile);
        transformparameterdir = transformparameterdir[0];
    
    #transform
    #make path in parameterfiles absolute
    self.setPathTransformParameterFiles(transformparameterdir);
   
    #transformix -in inputImage.ext -out outputDirectory -tp TransformParameters.txt
    cmd = ElastixSettings.TransformixBinary + ' -in ' + imgname + ' -out ' + outdirname + ' -tp ' + transformparameterfile;
    
    res = os.system(cmd);
    
    if res != 0:
        raise RuntimeError('failed executing: ' + cmd);

    if not isinstance(data, basestring):
        os.remove(imgname);
    
    return outdirectory
        
    

def transformPoints(points, alignmentdirectory = None, transformparameterfile = None, read = True, tmpfile = None, outdirectory = None, indices = True):
    """Transform pixel coordinates of cell centers using a calculated transformation obtained form elastix"""
    
    self.checkElastixInitialized();    
    global ElastixSettings;

    
    # write text file
    if isinstance(points, basestring):
        txtfile = points;
        #check if we have elastix signature
        
        with open(txtfile) as f:
            line = f.readline();
            f.close();
            
            if line[:5] != 'point' and line[:5] != 'index':
                fh, tmpfn = tempfile.mkstemp();
                with open(txtfile) as pointfile:
                    with open(tmpfn, 'w') as newfile:
                        lines = pointfile.readlines();
                        
                        if indices:
                            newfile.write('index\n')
                        else:
                            newfile.write('point\n')
                        
                        newfile.write(str(len(lines)) + '\n');
                        newfile.writelines(lines);
                
                txtfile = tmpfn;   
        
    else: # array of points
        if tmpfile == None:
            txtfile = os.path.join(tempfile.tempdir, 'elastix_input.txt');
        else:
            txtfile = tempfile;
        
        with open(txtfile, 'w') as pointfile:
            if indices:
                pointfile.write('index\n')
            else:
                pointfile.write('point\n')
        
            pointfile.write(str(points.shape[0]) + '\n');
            numpy.savetxt(pointfile, points, delimiter = ' ', newline = '\n', fmt = '%.5e')
            pointfile.close();

    
    if outdirectory == None:
        outdirname = os.path.join(tempfile.tempdir, 'elastix_output');
    else:
        outdirname = outdirectory;
        
    if not os.path.exists(outdirname):
        os.makedirs(outdirname);
        
    
    if transformparameterfile == None:
        if alignmentdirectory == None:
            RuntimeError('neither alignment directory and transformation parameter file specified!'); 
        transformparameterdir = alignmentdirectory
        transformparameterfile = getTransformParameterFile(transformparameterdir);
    else:
        transformparameterdir = os.path.split(transformparameterfile);
    
    #transform
    #make path in parameterfiles absolute
    self.setPathTransformParameterFiles(transformparameterdir);
    
    #run transformix   
    cmd = ElastixSettings.TransformixBinary + ' -def ' + txtfile + ' -out ' + outdirname + ' -tp ' + transformparameterfile;
    res = os.system(cmd);
    
    if res != 0:
        raise RuntimeError('failed executing ' + cmd);
    
    
    #read data / file 
    if outdirectory == None:    
        #read coordinates
        transpoints = parseElastixOutputPoints(os.path.join(outdirname, 'outputpoints.txt'), indices = indices);
        
        #cleanup
        for f in os.listdir(outdirname):
            os.remove(os.path.join(outdirname, f));
        os.rmdir(outdirname)
        
        return transpoints;
    
    else:
        return outdirname + 'outputpoints.txt'
        
        
 

##############################################################################
# Tests
##############################################################################

     
def test():
    from iDISCO.Parameter import iDISCOPath;
    p = iDISCOPath();
    
    resultdir = os.path.join(p, 'Test/Elastix/Output');
    
    print 'Searching for transformation parameter file in ' + resultdir;
    pf = self.getTransformParameterFile(resultdir)
      
    print 'Found: ' + pf;
    
    
    #replace path in trasform parameter files:
    self.setPathTransformParameterFiles(resultdir)
    
    #transform
    pts = numpy.random.rand(5,3);    
    parameter = AlignmentParameter();
    parameter.Lib = '/home/ckirst/programs/elastix/lib';
    parameter.Transformix = '/home/ckirst/programs/elastix/bin/transformix';
    
    print 'Transforming points: '
    tpts = self.transfromByEalstix(pts, pf, indices = False, parameter= parameter);
    print pts
    print 'Transformed points: '
    print tpts
    
    
if __name__ == "__main__":
    self.test();
    





  

    
    
    
